#[derive(Debug, PartialEq, Eq)]
pub struct Syntax {
    pub name: &'static str,
    pub extensions: &'static [&'static str],
    pub single_line_comment: &'static str,
    pub multi_line_comment: (&'static str, &'static str),
    pub keywords: &'static [&'static str],
    pub types: &'static [&'static str],
    pub builtins: &'static [&'static str],
    pub string_delimiter: &'static str,
    pub custom_separator: Option<&'static str>,
    pub flags: u32,
}

pub const HIGHLIGHT_NUMBERS: u32 = 1 << 0;
pub const HIGHLIGHT_STRINGS: u32 = 1 << 1;
pub const HIGHLIGHT_CHARS: u32 = 1 << 2;
pub const HIGHLIGHT_CASE_INSENSITIVE: u32 = 1 << 3;

pub const SYNTAX_C: Syntax = Syntax {
    name: "c",
    extensions: &[".c", ".h", ".cpp"],
    single_line_comment: "//",
    multi_line_comment: ("/*", "*/"),
    keywords: &[
        "switch", "if", "while", "for", "break", "continue", "return", "else",
        "struct", "union", "typedef", "static", "enum", "class", "case",
        "sizeof",
    ],
    types: &[
        "int", "long", "double", "float", "char", "unsigned", "signed", "void",
    ],
    builtins: &[],
    string_delimiter: "\"",
    custom_separator: None,
    flags: HIGHLIGHT_NUMBERS | HIGHLIGHT_STRINGS | HIGHLIGHT_CHARS,
};

pub const SYNTAX_RUST: Syntax = Syntax {
    name: "rust",
    extensions: &[".rs"],
    single_line_comment: "//",
    multi_line_comment: ("/*", "*/"),
    keywords: &[
        "as", "break", "const", "continue", "crate", "else", "enum", "extern",
        "false", "fn", "for", "if", "impl", "in", "let", "loop", "match",
        "mod", "move", "mut", "pub", "ref", "return", "self", "Self", "static",
        "struct", "super", "trait", "true", "type", "unsafe", "use", "where",
        "while", "async", "await", "dyn",
    ],
    types: &[
        "bool", "char", "f32", "f64", "i128", "i16", "i32", "i64", "i8",
        "isize", "str", "u128", "u16", "u32", "u64", "u8", "usize",
    ],
    builtins: &[],
    string_delimiter: "\"",
    custom_separator: None,
    flags: HIGHLIGHT_NUMBERS | HIGHLIGHT_STRINGS | HIGHLIGHT_CHARS,
};

pub const SYNTAX_HASKELL: Syntax = Syntax {
    name: "haskell",
    extensions: &[".hs"],
    single_line_comment: "--",
    multi_line_comment: ("{-", "-}"),
    keywords: &[
        "as",
        "case",
        "of",
        "class",
        "data",
        "data family",
        "data instance",
        "default",
        "deriving",
        "deriving instance",
        "do",
        "forall",
        "foreign",
        "hiding",
        "if",
        "then",
        "else",
        "import",
        "infix",
        "infixl",
        "infixr",
        "instance",
        "let",
        "in",
        "mdo",
        "module",
        "newtype",
        "proc",
        "qualified",
        "rec",
        "type",
        "type family",
        "type instance",
        "where",
    ],
    types: &[
        "Bool",
        "Bounded",
        "Char",
        "Double",
        "Either",
        "Enum",
        "Eq",
        "Float",
        "Floating",
        "Fractional",
        "Functor",
        "IO",
        "Int",
        "Integer",
        "Integral",
        "Maybe",
        "Monad",
        "Num",
        "Ord",
        "Ordering",
        "Rational",
        "Real",
        "RealFloat",
        "RealFrac",
        "String",
    ],
    builtins: &[],
    string_delimiter: "\"",
    custom_separator: None,
    flags: HIGHLIGHT_NUMBERS | HIGHLIGHT_STRINGS | HIGHLIGHT_CHARS,
};

pub const SYNTAX_PYTHON: Syntax = Syntax {
    name: "python",
    extensions: &[".py"],
    single_line_comment: "#",
    multi_line_comment: ("", ""),
    keywords: &[
        "False", "None", "True", "and", "as", "assert", "async", "await",
        "break", "class", "continue", "def", "del", "elif", "else", "except",
        "finally", "for", "from", "global", "if", "import", "in", "is",
        "lambda", "nonlocal", "not", "or", "pass", "raise", "return", "try",
        "while", "with", "yield",
    ],
    types: &["int", "float", "bool", "str", "bytes", "object"],
    builtins: &[
        "abs",
        "all",
        "any",
        "ascii",
        "bin",
        "bool",
        "breakpoint",
        "bytearray",
        "bytes",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "exec",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "print",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip",
    ],
    string_delimiter: "\"'",
    custom_separator: None,
    flags: HIGHLIGHT_NUMBERS | HIGHLIGHT_STRINGS,
};

pub const SYNTAX_SHELL: Syntax = Syntax {
    name: "shell",
    extensions: &[".sh"],
    single_line_comment: "#",
    multi_line_comment: ("", ""),
    keywords: &[
        "if", "then", "else", "elif", "fi", "case", "esac", "for", "select",
        "while", "until", "do", "done", "in", "function", "time", "coproc",
    ],
    types: &[],
    builtins: &[
        "alias",
        "bg",
        "bind",
        "break",
        "builtin",
        "caller",
        "cd",
        "command",
        "compgen",
        "complete",
        "compopt",
        "continue",
        "declare",
        "dirs",
        "disown",
        "echo",
        "enable",
        "eval",
        "exec",
        "exit",
        "export",
        "false",
        "fc",
        "fg",
        "getopts",
        "hash",
        "help",
        "history",
        "jobs",
        "kill",
        "let",
        "local",
        "logout",
        "mapfile",
        "popd",
        "printf",
        "pushd",
        "pwd",
        "read",
        "readarray",
        "readonly",
        "return",
        "set",
        "shift",
        "shopt",
        "source",
        "suspend",
        "test",
        "times",
        "trap",
        "true",
        "type",
        "typeset",
        "ulimit",
        "umask",
        "unalias",
        "unset",
        "wait",
    ],
    string_delimiter: "\"'",
    custom_separator: None,
    flags: HIGHLIGHT_NUMBERS | HIGHLIGHT_STRINGS | HIGHLIGHT_CHARS,
};

pub const SYNTAX_LISP: Syntax = Syntax {
    name: "lisp",
    extensions: &[".cl", ".lisp"],
    single_line_comment: ";",
    multi_line_comment: ("#|", "|#"),
    keywords: &[],
    types: &[],
    builtins: &[
        // NOTE: http://clhs.lisp.se/Front/X_AllSym.htm
        "&allow-other-keys",
        "&aux",
        "&body",
        "&environment",
        "&key",
        "&optional",
        "&rest",
        "&whole",
        "*",
        "**",
        "***",
        "*break-on-signals*",
        "*compile-file-pathname*",
        "*compile-file-truename*",
        "*compile-print*",
        "*compile-verbose*",
        "*debug-io*",
        "*debugger-hook*",
        "*default-pathname-defaults*",
        "*error-output*",
        "*features*",
        "*gensym-counter*",
        "*load-pathname*",
        "*load-print*",
        "*load-truename*",
        "*load-verbose*",
        "*macroexpand-hook*",
        "*modules*",
        "*package*",
        "*print-array*",
        "*print-base*",
        "*print-case*",
        "*print-circle*",
        "*print-escape*",
        "*print-gensym*",
        "*print-length*",
        "*print-level*",
        "*print-lines*",
        "*print-miser-width*",
        "*print-pprint-dispatch*",
        "*print-pretty*",
        "*print-radix*",
        "*print-readably*",
        "*print-right-margin*",
        "*query-io*",
        "*random-state*",
        "*read-base*",
        "*read-default-float-format*",
        "*read-eval*",
        "*read-suppress*",
        "*readtable*",
        "*standard-input*",
        "*standard-output*",
        "*terminal-io*",
        "*trace-output*",
        "+",
        "++",
        "+++",
        "-",
        "/",
        "//",
        "///",
        "/=",
        "1+",
        "1-",
        "<",
        "<=",
        "=",
        ">",
        ">=",
        "abort",
        "abs",
        "acons",
        "acos",
        "acosh",
        "add-method",
        "adjoin",
        "adjust-array",
        "adjustable-array-p",
        "allocate-instance",
        "alpha-char-p",
        "alphanumericp",
        "and",
        "append",
        "apply",
        "apropos",
        "apropos-list",
        "aref",
        "arithmetic-error",
        "arithmetic-error-operands",
        "arithmetic-error-operation",
        "array",
        "array-dimension",
        "array-dimension-limit",
        "array-dimensions",
        "array-displacement",
        "array-element-type",
        "array-has-fill-pointer-p",
        "array-in-bounds-p",
        "array-rank",
        "array-rank-limit",
        "array-row-major-index",
        "array-total-size",
        "array-total-size-limit",
        "arrayp",
        "ash",
        "asin",
        "asinh",
        "assert",
        "assoc",
        "assoc-if",
        "assoc-if-not",
        "atan",
        "atanh",
        "atom",
        "base-char",
        "base-string",
        "bignum",
        "bit",
        "bit-and",
        "bit-andc1",
        "bit-andc2",
        "bit-eqv",
        "bit-ior",
        "bit-nand",
        "bit-nor",
        "bit-not",
        "bit-orc1",
        "bit-orc2",
        "bit-vector",
        "bit-vector-p",
        "bit-xor",
        "block",
        "boole",
        "boole-1",
        "boole-2",
        "boole-and",
        "boole-andc1",
        "boole-andc2",
        "boole-c1",
        "boole-c2",
        "boole-clr",
        "boole-eqv",
        "boole-ior",
        "boole-nand",
        "boole-nor",
        "boole-orc1",
        "boole-orc2",
        "boole-set",
        "boole-xor",
        "boolean",
        "both-case-p",
        "boundp",
        "break",
        "broadcast-stream",
        "broadcast-stream-streams",
        "built-in-class",
        "butlast",
        "byte",
        "byte-position",
        "byte-size",
        "caaaar",
        "caaadr",
        "caaar",
        "caadar",
        "caaddr",
        "caadr",
        "caar",
        "cadaar",
        "cadadr",
        "cadar",
        "caddar",
        "cadddr",
        "caddr",
        "cadr",
        "call-arguments-limit",
        "call-method",
        "call-next-method",
        "car",
        "case",
        "catch",
        "ccase",
        "cdaaar",
        "cdaadr",
        "cdaar",
        "cdadar",
        "cdaddr",
        "cdadr",
        "cdar",
        "cddaar",
        "cddadr",
        "cddar",
        "cdddar",
        "cddddr",
        "cdddr",
        "cddr",
        "cdr",
        "ceiling",
        "cell-error",
        "cell-error-name",
        "cerror",
        "change-class",
        "char",
        "char-code",
        "char-code-limit",
        "char-downcase",
        "char-equal",
        "char-greaterp",
        "char-int",
        "char-lessp",
        "char-name",
        "char-not-equal",
        "char-not-greaterp",
        "char-not-lessp",
        "char-upcase",
        "char/=",
        "char<",
        "char<=",
        "char=",
        "char>",
        "char>=",
        "character",
        "characterp",
        "check-type",
        "cis",
        "class",
        "class-name",
        "class-of",
        "clear-input",
        "clear-output",
        "close",
        "clrhash",
        "code-char",
        "coerce",
        "compilation-speed",
        "compile",
        "compile-file",
        "compile-file-pathname",
        "compiled-function",
        "compiled-function-p",
        "compiler-macro",
        "compiler-macro-function",
        "complement",
        "complex",
        "complexp",
        "compute-applicable-methods",
        "compute-restarts",
        "concatenate",
        "concatenated-stream",
        "concatenated-stream-streams",
        "cond",
        "condition",
        "conjugate",
        "cons",
        "consp",
        "constantly",
        "constantp",
        "continue",
        "control-error",
        "copy-alist",
        "copy-list",
        "copy-pprint-dispatch",
        "copy-readtable",
        "copy-seq",
        "copy-structure",
        "copy-symbol",
        "copy-tree",
        "cos",
        "cosh",
        "count",
        "count-if",
        "count-if-not",
        "ctypecase",
        "debug",
        "decf",
        "declaim",
        "declaration",
        "declare",
        "decode-float",
        "decode-universal-time",
        "defclass",
        "defconstant",
        "defgeneric",
        "define-compiler-macro",
        "define-condition",
        "define-method-combination",
        "define-modify-macro",
        "define-setf-expander",
        "define-symbol-macro",
        "defmacro",
        "defmethod",
        "defpackage",
        "defparameter",
        "defsetf",
        "defstruct",
        "deftype",
        "defun",
        "defvar",
        "delete",
        "delete-duplicates",
        "delete-file",
        "delete-if",
        "delete-if-not",
        "delete-package",
        "denominator",
        "deposit-field",
        "describe",
        "describe-object",
        "destructuring-bind",
        "digit-char",
        "digit-char-p",
        "directory",
        "directory-namestring",
        "disassemble",
        "division-by-zero",
        "do",
        "do*",
        "do-all-symbols",
        "do-external-symbols",
        "do-symbols",
        "documentation",
        "dolist",
        "dotimes",
        "double-float",
        "double-float-epsilon",
        "double-float-negative-epsilon",
        "dpb",
        "dribble",
        "dynamic-extent",
        "ecase",
        "echo-stream",
        "echo-stream-input-stream",
        "echo-stream-output-stream",
        "ed",
        "eighth",
        "elt",
        "encode-universal-time",
        "end-of-file",
        "endp",
        "enough-namestring",
        "ensure-directories-exist",
        "ensure-generic-function",
        "eq",
        "eql",
        "equal",
        "equalp",
        "error",
        "etypecase",
        "eval",
        "eval-when",
        "evenp",
        "every",
        "exp",
        "export",
        "expt",
        "extended-char",
        "fboundp",
        "fceiling",
        "fdefinition",
        "ffloor",
        "fifth",
        "file-author",
        "file-error",
        "file-error-pathname",
        "file-length",
        "file-namestring",
        "file-position",
        "file-stream",
        "file-string-length",
        "file-write-date",
        "fill",
        "fill-pointer",
        "find",
        "find-all-symbols",
        "find-class",
        "find-if",
        "find-if-not",
        "find-method",
        "find-package",
        "find-restart",
        "find-symbol",
        "finish-output",
        "first",
        "fixnum",
        "flet",
        "float",
        "float-digits",
        "float-precision",
        "float-radix",
        "float-sign",
        "floating-point-inexact",
        "floating-point-invalid-operation",
        "floating-point-overflow",
        "floating-point-underflow",
        "floatp",
        "floor",
        "fmakunbound",
        "force-output",
        "format",
        "formatter",
        "fourth",
        "fresh-line",
        "fround",
        "ftruncate",
        "ftype",
        "funcall",
        "function",
        "function-keywords",
        "function-lambda-expression",
        "functionp",
        "gcd",
        "generic-function",
        "gensym",
        "gentemp",
        "get",
        "get-decoded-time",
        "get-dispatch-macro-character",
        "get-internal-real-time",
        "get-internal-run-time",
        "get-macro-character",
        "get-output-stream-string",
        "get-properties",
        "get-setf-expansion",
        "get-universal-time",
        "getf",
        "gethash",
        "go",
        "graphic-char-p",
        "handler-bind",
        "handler-case",
        "hash-table",
        "hash-table-count",
        "hash-table-p",
        "hash-table-rehash-size",
        "hash-table-rehash-threshold",
        "hash-table-size",
        "hash-table-test",
        "host-namestring",
        "identity",
        "if",
        "ignorable",
        "ignore",
        "ignore-errors",
        "imagpart",
        "import",
        "in-package",
        "incf",
        "initialize-instance",
        "inline",
        "input-stream-p",
        "inspect",
        "integer",
        "integer-decode-float",
        "integer-length",
        "integerp",
        "interactive-stream-p",
        "intern",
        "internal-time-units-per-second",
        "intersection",
        "invalid-method-error",
        "invoke-debugger",
        "invoke-restart",
        "invoke-restart-interactively",
        "isqrt",
        "keyword",
        "keywordp",
        "labels",
        "lambda",
        "lambda-list-keywords",
        "lambda-parameters-limit",
        "last",
        "lcm",
        "ldb",
        "ldb-test",
        "ldiff",
        "least-negative-double-float",
        "least-negative-long-float",
        "least-negative-normalized-double-float",
        "least-negative-normalized-long-float",
        "least-negative-normalized-short-float",
        "least-negative-normalized-single-float",
        "least-negative-short-float",
        "least-negative-single-float",
        "least-positive-double-float",
        "least-positive-long-float",
        "least-positive-normalized-double-float",
        "least-positive-normalized-long-float",
        "least-positive-normalized-short-float",
        "least-positive-normalized-single-float",
        "least-positive-short-float",
        "least-positive-single-float",
        "length",
        "let",
        "let*",
        "lisp-implementation-type",
        "lisp-implementation-version",
        "list",
        "list*",
        "list-all-packages",
        "list-length",
        "listen",
        "listp",
        "load",
        "load-logical-pathname-translations",
        "load-time-value",
        "locally",
        "log",
        "logand",
        "logandc1",
        "logandc2",
        "logbitp",
        "logcount",
        "logeqv",
        "logical-pathname",
        "logical-pathname-translations",
        "logior",
        "lognand",
        "lognor",
        "lognot",
        "logorc1",
        "logorc2",
        "logtest",
        "logxor",
        "long-float",
        "long-float-epsilon",
        "long-float-negative-epsilon",
        "long-site-name",
        "loop",
        "loop-finish",
        "lower-case-p",
        "machine-instance",
        "machine-type",
        "machine-version",
        "macro-function",
        "macroexpand",
        "macroexpand-1",
        "macrolet",
        "make-array",
        "make-broadcast-stream",
        "make-concatenated-stream",
        "make-condition",
        "make-dispatch-macro-character",
        "make-echo-stream",
        "make-hash-table",
        "make-instance",
        "make-instances-obsolete",
        "make-list",
        "make-load-form",
        "make-load-form-saving-slots",
        "make-method",
        "make-package",
        "make-pathname",
        "make-random-state",
        "make-sequence",
        "make-string",
        "make-string-input-stream",
        "make-string-output-stream",
        "make-symbol",
        "make-synonym-stream",
        "make-two-way-stream",
        "makunbound",
        "map",
        "map-into",
        "mapc",
        "mapcan",
        "mapcar",
        "mapcon",
        "maphash",
        "mapl",
        "maplist",
        "mask-field",
        "max",
        "member",
        "member-if",
        "member-if-not",
        "merge",
        "merge-pathnames",
        "method",
        "method-combination",
        "method-combination-error",
        "method-qualifiers",
        "min",
        "minusp",
        "mismatch",
        "mod",
        "most-negative-double-float",
        "most-negative-fixnum",
        "most-negative-long-float",
        "most-negative-short-float",
        "most-negative-single-float",
        "most-positive-double-float",
        "most-positive-fixnum",
        "most-positive-long-float",
        "most-positive-short-float",
        "most-positive-single-float",
        "muffle-warning",
        "multiple-value-bind",
        "multiple-value-call",
        "multiple-value-list",
        "multiple-value-prog1",
        "multiple-value-setq",
        "multiple-values-limit",
        "name-char",
        "namestring",
        "nbutlast",
        "nconc",
        "next-method-p",
        "nil",
        "nintersection",
        "ninth",
        "no-applicable-method",
        "no-next-method",
        "not",
        "notany",
        "notevery",
        "notinline",
        "nreconc",
        "nreverse",
        "nset-difference",
        "nset-exclusive-or",
        "nstring-capitalize",
        "nstring-downcase",
        "nstring-upcase",
        "nsublis",
        "nsubst",
        "nsubst-if",
        "nsubst-if-not",
        "nsubstitute",
        "nsubstitute-if",
        "nsubstitute-if-not",
        "nth",
        "nth-value",
        "nthcdr",
        "null",
        "number",
        "numberp",
        "numerator",
        "nunion",
        "oddp",
        "open",
        "open-stream-p",
        "optimize",
        "or",
        "otherwise",
        "output-stream-p",
        "package",
        "package-error",
        "package-error-package",
        "package-name",
        "package-nicknames",
        "package-shadowing-symbols",
        "package-use-list",
        "package-used-by-list",
        "packagep",
        "pairlis",
        "parse-error",
        "parse-integer",
        "parse-namestring",
        "pathname",
        "pathname-device",
        "pathname-directory",
        "pathname-host",
        "pathname-match-p",
        "pathname-name",
        "pathname-type",
        "pathname-version",
        "pathnamep",
        "peek-char",
        "phase",
        "pi",
        "plusp",
        "pop",
        "position",
        "position-if",
        "position-if-not",
        "pprint",
        "pprint-dispatch",
        "pprint-exit-if-list-exhausted",
        "pprint-fill",
        "pprint-indent",
        "pprint-linear",
        "pprint-logical-block",
        "pprint-newline",
        "pprint-pop",
        "pprint-tab",
        "pprint-tabular",
        "prin1",
        "prin1-to-string",
        "princ",
        "princ-to-string",
        "print",
        "print-not-readable",
        "print-not-readable-object",
        "print-object",
        "print-unreadable-object",
        "probe-file",
        "proclaim",
        "prog",
        "prog*",
        "prog1",
        "prog2",
        "progn",
        "program-error",
        "progv",
        "provide",
        "psetf",
        "psetq",
        "push",
        "pushnew",
        "quote",
        "random",
        "random-state",
        "random-state-p",
        "rassoc",
        "rassoc-if",
        "rassoc-if-not",
        "ratio",
        "rational",
        "rationalize",
        "rationalp",
        "read",
        "read-byte",
        "read-char",
        "read-char-no-hang",
        "read-delimited-list",
        "read-from-string",
        "read-line",
        "read-preserving-whitespace",
        "read-sequence",
        "reader-error",
        "readtable",
        "readtable-case",
        "readtablep",
        "real",
        "realp",
        "realpart",
        "reduce",
        "reinitialize-instance",
        "rem",
        "remf",
        "remhash",
        "remove",
        "remove-duplicates",
        "remove-if",
        "remove-if-not",
        "remove-method",
        "remprop",
        "rename-file",
        "rename-package",
        "replace",
        "require",
        "rest",
        "restart",
        "restart-bind",
        "restart-case",
        "restart-name",
        "return",
        "return-from",
        "revappend",
        "reverse",
        "room",
        "rotatef",
        "round",
        "row-major-aref",
        "rplaca",
        "rplacd",
        "safety",
        "satisfies",
        "sbit",
        "scale-float",
        "schar",
        "search",
        "second",
        "sequence",
        "serious-condition",
        "set",
        "set-difference",
        "set-dispatch-macro-character",
        "set-exclusive-or",
        "set-macro-character",
        "set-pprint-dispatch",
        "set-syntax-from-char",
        "setf",
        "setq",
        "seventh",
        "shadow",
        "shadowing-import",
        "shared-initialize",
        "shiftf",
        "short-float",
        "short-float-epsilon",
        "short-float-negative-epsilon",
        "short-site-name",
        "signal",
        "signed-byte",
        "signum",
        "simple-array",
        "simple-base-string",
        "simple-bit-vector",
        "simple-bit-vector-p",
        "simple-condition",
        "simple-condition-format-arguments",
        "simple-condition-format-control",
        "simple-error",
        "simple-string",
        "simple-string-p",
        "simple-type-error",
        "simple-vector",
        "simple-vector-p",
        "simple-warning",
        "sin",
        "single-float",
        "single-float-epsilon",
        "single-float-negative-epsilon",
        "sinh",
        "sixth",
        "sleep",
        "slot-boundp",
        "slot-exists-p",
        "slot-makunbound",
        "slot-missing",
        "slot-unbound",
        "slot-value",
        "software-type",
        "software-version",
        "some",
        "sort",
        "space",
        "special",
        "special-operator-p",
        "speed",
        "sqrt",
        "stable-sort",
        "standard",
        "standard-char",
        "standard-char-p",
        "standard-class",
        "standard-generic-function",
        "standard-method",
        "standard-object",
        "step",
        "storage-condition",
        "store-value",
        "stream",
        "stream-element-type",
        "stream-error",
        "stream-error-stream",
        "stream-external-format",
        "streamp",
        "string",
        "string-capitalize",
        "string-downcase",
        "string-equal",
        "string-greaterp",
        "string-left-trim",
        "string-lessp",
        "string-not-equal",
        "string-not-greaterp",
        "string-not-lessp",
        "string-right-trim",
        "string-stream",
        "string-trim",
        "string-upcase",
        "string/=",
        "string<",
        "string<=",
        "string=",
        "string>",
        "string>=",
        "stringp",
        "structure",
        "structure-class",
        "structure-object",
        "style-warning",
        "sublis",
        "subseq",
        "subsetp",
        "subst",
        "subst-if",
        "subst-if-not",
        "substitute",
        "substitute-if",
        "substitute-if-not",
        "subtypep",
        "svref",
        "sxhash",
        "symbol",
        "symbol-function",
        "symbol-macrolet",
        "symbol-name",
        "symbol-package",
        "symbol-plist",
        "symbol-value",
        "symbolp",
        "synonym-stream",
        "synonym-stream-symbol",
        "t",
        "tagbody",
        "tailp",
        "tan",
        "tanh",
        "tenth",
        "terpri",
        "the",
        "third",
        "throw",
        "time",
        "trace",
        "translate-logical-pathname",
        "translate-pathname",
        "tree-equal",
        "truename",
        "truncate",
        "two-way-stream",
        "two-way-stream-input-stream",
        "two-way-stream-output-stream",
        "type",
        "type-error",
        "type-error-datum",
        "type-error-expected-type",
        "type-of",
        "typecase",
        "typep",
        "unbound-slot",
        "unbound-slot-instance",
        "unbound-variable",
        "undefined-function",
        "unexport",
        "unintern",
        "union",
        "unless",
        "unread-char",
        "unsigned-byte",
        "untrace",
        "unuse-package",
        "unwind-protect",
        "update-instance-for-different-class",
        "update-instance-for-redefined-class",
        "upgraded-array-element-type",
        "upgraded-complex-part-type",
        "upper-case-p",
        "use-package",
        "use-value",
        "user-homedir-pathname",
        "values",
        "values-list",
        "variable",
        "vector",
        "vector-pop",
        "vector-push",
        "vector-push-extend",
        "vectorp",
        "warn",
        "warning",
        "when",
        "wild-pathname-p",
        "with-accessors",
        "with-compilation-unit",
        "with-condition-restarts",
        "with-hash-table-iterator",
        "with-input-from-string",
        "with-open-file",
        "with-open-stream",
        "with-output-to-string",
        "with-package-iterator",
        "with-simple-restart",
        "with-slots",
        "with-standard-io-syntax",
        "write",
        "write-byte",
        "write-char",
        "write-line",
        "write-sequence",
        "write-string",
        "write-to-string",
        "y-or-n-p",
        "yes-or-no-p",
        "zerop",
    ],
    string_delimiter: "\"",
    custom_separator: Some("()"),
    flags: HIGHLIGHT_NUMBERS
        | HIGHLIGHT_STRINGS
        | HIGHLIGHT_CHARS
        | HIGHLIGHT_CASE_INSENSITIVE,
};

pub const SYNTAX_CMAKE: Syntax = Syntax {
    name: "cmake",
    extensions: &["CMakeLists.txt", ".cmake"],
    single_line_comment: "#",
    multi_line_comment: ("#[[", "]]"),
    keywords: &[
        "if",
        "macro",
        "foreach",
        "else",
        "elseif",
        "while",
        "function",
        "endif",
        "endforeach",
        "endmacro",
        "endwhile",
        "endfunction",
    ],
    types: &[],
    builtins: &[
        "add_compile_definitions",
        "add_compile_options",
        "add_custom_command",
        "add_custom_target",
        "add_definitions",
        "add_dependencies",
        "add_executable",
        "add_library",
        "add_link_options",
        "add_subdirectory",
        "add_test",
        "aux_source_directory",
        "break",
        "build_command",
        "build_name",
        "cmake_host_system_information",
        "cmake_language",
        "cmake_minimum_required",
        "cmake_parse_arguments",
        "cmake_path",
        "cmake_policy",
        "configure_file",
        "continue",
        "create_test_sourcelist",
        "ctest_build",
        "ctest_configure",
        "ctest_coverage",
        "ctest_empty_binary_directory",
        "ctest_memcheck",
        "ctest_read_custom_files",
        "ctest_run_script",
        "ctest_sleep",
        "ctest_start",
        "ctest_submit",
        "ctest_test",
        "ctest_update",
        "ctest_upload",
        "define_property",
        "enable_language",
        "enable_testing",
        "exec_program",
        "execute_process",
        "export",
        "export_library_dependencies",
        "file",
        "find_file",
        "find_library",
        "find_package",
        "find_path",
        "find_program",
        "fltk_wrap_ui",
        "get_cmake_property",
        "get_directory_property",
        "get_filename_component",
        "get_property",
        "get_source_file_property",
        "get_target_property",
        "get_test_property",
        "include",
        "include_directories",
        "include_external_msproject",
        "include_guard",
        "include_regular_expression",
        "install",
        "install_files",
        "install_programs",
        "install_targets",
        "link_directories",
        "link_libraries",
        "list",
        "load_cache",
        "load_command",
        "make_directory",
        "mark_as_advanced",
        "math",
        "message",
        "option",
        "output_required_files",
        "project",
        "qt_wrap_cpp",
        "qt_wrap_ui",
        "remove",
        "remove_definitions",
        "return",
        "separate_arguments",
        "set",
        "set_directory_properties",
        "set_property",
        "set_source_files_properties",
        "set_target_properties",
        "set_tests_properties",
        "site_name",
        "source_group",
        "string",
        "subdir_depends",
        "subdirs",
        "target_compile_definitions",
        "target_compile_features",
        "target_compile_options",
        "target_include_directories",
        "target_link_directories",
        "target_link_libraries",
        "target_link_options",
        "target_precompile_headers",
        "target_sources",
        "try_compile",
        "try_run",
        "unset",
        "use_mangled_mesa",
        "utility_source",
        "variable_requires",
        "variable_watch",
        "write_file",
    ],
    string_delimiter: "\"",
    custom_separator: None,
    flags: HIGHLIGHT_STRINGS | HIGHLIGHT_CASE_INSENSITIVE | HIGHLIGHT_CHARS,
};

pub const SYNTAXES: &[Syntax] = &[
    SYNTAX_C,
    SYNTAX_RUST,
    SYNTAX_HASKELL,
    SYNTAX_PYTHON,
    SYNTAX_SHELL,
    SYNTAX_LISP,
    SYNTAX_CMAKE,
];

#[cfg(test)]
mod tests;
